library(dplyr)
nomer <- seq(1,8, by = 1)
nama <- c("Denora", "Rena", "Sam", "John", "Kira", "Zena", "William", "Ahlan")
gender <- rep(c("Perempuan", "Laki-Laki"), each = 2)
salary <- seq(40000,5000, by = -5000)
age <- rep(c("25", "26"), each = 4)

data_frame_satu <- data.frame(No = nomer, Nama = nama, Jenis_Kelamin = gender, Gaji = salary, Umur = age)
data_frame_satu

deteksi <- function(n) {
  for (i in 1:n) {
    if (i %% 2 == 0) {
      print(paste(i, "adalah bilangan genap"))
    } else {
      print(paste(i, "adalah bilangan ganjil"))
    }
  }
}

deteksi(20)

library(readr)
setwd("C:/Users/ASUS/Downloads")
data <- read.csv("Life Expectancy Data.csv", sep = ',')
tahun <- subset(data, Year == 2015)

count <- table(tahun$Status)
count

indonesia <- subset(data, Country == "Indonesia" )

meanz <- mean(indonesia$Life.expectancy)
medianz <- median(indonesia$Life.expectancy)
minz <- min(indonesia$Life.expectancy)
maxz <- max(indonesia$Life.expectancy)

print(paste("Mean Life Expectancy:", meanz))
print(paste("Median Life Expectancy:", medianz))
print(paste("Min Life Expectancy:", minz))
print(paste("Max Life Expectancy:", maxz))

library(dplyr)
tahunz <- data %>% filter(Year == 2010)

median_value = median(tahunz$GDP, na.rm=TRUE)
tahunz$GDP[is.na(tahunz$GDP)] <- median_value

tahunz %>%
  group_by(Status) %>% 
  summarize(mean = mean(GDP), median = median(GDP), min = min(GDP), max = max(GDP))

x1 = c(1,2,3,4,5,6,7,8,9,10)
x1
x2 = c(1:10)
x2
x3 = seq(1:10)
x3
x4 = 1:10
x4
x5 = seq(from=1, to=10, by=1)
x5

m1 <- matrix(x1, nrow=5)
m1

regresi <- read_csv("C:/Users/ASUS/Downloads/regresi.csv")
View(regresi)

y <- c(regresi[, 5])
y

vec1 <- rep(1,13)

x <- cbind(vec1, regresi[,1:4])
x <- as.matrix(x)
x

xtrans <- t(x)
xtrans <- as.matrix(xtrans)
xtrans

xtr <- xtrans%*%x
xtr

inv <- solve(xtr)
inv


invx <- inv%*%xtrans
invx


attach(mtcars)
sum(wt)/nrow(mtcars)
mean(wt)
sum(mtcars$wt)/nrow(mtcars) 
mean(mtcars$wt) 

aver <- function(x) {
  n <- length(x)
  xbar <- 0
  for (i in c(1:n))
  {
    xbar <- xbar + ((x[i]/n))
  }
  xbar
}
aver(wt)

tabel <- sort(mtcars$wt) 
head(tabel)
n <- length(tabel) 
p <- 0.5 
np <- n*p
x13 <- tabel[13] 
x15 <- tabel[15] 
median <- (x13+x15)/2 
median

table_cyl <- table(cyl)
print(table_cyl)

l <- length(levels(factor(wt)))

modus <- names(sort(table_cyl)[l])

print(modus)

moduz <- function(x) {
  unik <- unique(x)
  unik[which.max(tabulate(match(x, unik)))]
}

mode <- moduz(cyl)
print(mode)

sdev <- function(x){
  n <- length(x)
  dev <- 0
  for (i in 1:n)
  {
    dev <- dev + (x[i]-mean(x))^2
  }
  varians <- dev/(n-1)
  stdev <- sqrt(varians)
  spread <- list(Variansi = varians, `Standar Deviasi` = stdev)
  return(spread)
}
result <- sdev(wt)
print(result)

standar_deviasi <- sd(wt)
print(standar_deviasi)

# Fungsi untuk pengurutan dari besar ke kecil
descending <- function(vec) {
  n <- length(vec)
  for (i in 1:(n - 1)) {
    for (j in 1:(n - i)) {
      if (vec[j] < vec[j + 1]) {
        temp <- vec[j]
        vec[j] <- vec[j + 1]
        vec[j + 1] <- temp
      }
    }
  }
  return(vec)
}

# Vektor contoh
vec <- c(5, 3, 8, 2, 9)

# Memanggil fungsi pengurutan
sorted_vec <- descending(vec)

# Mencetak hasil pengurutan
print(sorted_vec)


ascending <- function(vec) {
  n <- length(vec)
  for (i in 1:(n - 1)) {
    for (j in 1:(n - i)) {
      if (vec[j] > vec[j + 1]) {
        temp <- vec[j]
        vec[j] <- vec[j + 1]
        vec[j + 1] <- temp
      }
    }
  }
  return(vec)
}

# Vektor contoh
vec <- c(5, 3, 8, 2, 9)

# Memanggil fungsi pengurutan
sorted_vec <- ascending(vec)

# Mencetak hasil pengurutan
print(sorted_vec)

#week4
geom
n <- 100
p <- 0.1

set.seed(100)
u <- runif(n)

x <- (log(1 - u) / log(1 - p)) - 1
xcel <- ceiling(log(1 - u) / log(1 - p)) - 1
head(xcel)

#r
set.seed(100)
xgeom <- rgeom(n, p)
head(xgeom)

#histo
par(mfrow=c(1,3))
hist(x,main="Distribusi Geometri Transformasi Invers")
hist(xcel, main="Distribusi Geometri Transformasi Invers Dibulatkan")
hist(xgeom,main=" Distribusi Geometri R")

#weibull
a <- 1
b <- 0.1
n1 <- 100

set.seed(100)
u1 <- runif(n1)

xb <- b * sqrt(-log(1 - u1))/a
head(xb)

set.seed(100)
xbull <- rweibull(n1, a, b)
head(xbull)

par(mfrow=c(1,2))
hist(xb,main="Distribusi Weibull Transformasi Invers")
hist(xbull,main="Distribusi Weibull fungsi R")

#week5
set.seed(100) # mengatur seed untuk menghasilkan angka acak sebanyak 100
z <- runif(100) # menghasilkan sampel angka acak antara 0 dan 1
x <- -2:2 # nilai diskrit dari -2 hingga 2

# Metode invers transform
get.x <- function(data) {
  result <- numeric(length(data))
  
  for (i in seq_along(data)) {
    if (data[i] <= 0.2) {
      result[i] <- -2
    } else if (data[i] > 0.2 & data[i] <= 0.35) {
      result[i] <- -1
    } else if (data[i] > 0.35 & data[i] <= 0.55) {
      result[i] <- 0
    } else if (data[i] > 0.55 & data[i] <= 0.9) {
      result[i] <- 1
    } else {
      result[i] <- 2
    }
  }
  
  return(result)
}
simulated_data <- get.x(z)

#Membuat data frame dari hasil perhitungan
df <- data.frame(z, simulated_data)
names(df) <- c("z", "simulated_data")
df

n <- 100 #menentukan jumlah sampel yang akan digunakan
sampel <- c(-2, -1, 0, 1, 2) #nilai dari variabel acak diskrit
fx <- c(0.20, 0.15, 0.20, 0.35, 0.10)
(Fx <- cumsum(fx)) #menghitung distribusi kumulatif untuk mementukan ambang batas invers transorm

xsample <-sample(sampel, size=n, replace=TRUE, prob=fx)

min_get <- function(uval) {
  min(sampel[Fx >= uval])
}

xsim <- sapply(runif(n), min_get)

options(repr.plot.width=10, repr.plot.height=5) #mengatur tinggi dan lebar dari histogram
par(mfrow=c(1,2)) #mengatur letak histogram sehingga menampilkan dua plot yang berdampingan.

hist(xsim)
hist(xsample)

n <- 10000 #menentukan jumlah sampel sebanyak 10000
p <- .5 #memetapkan nilai probabilitas yaitu 0.5

kumulatif <- c(1 - p, 1)
samplez <- c(0, 1)
u <- runif(n)

min_get <- function(uval) {
  min(samplez[kumulatif >= uval])
} #digunakan untuk melakukan invers transformasi
xsim <- sapply(u, min_get)
```

```{r}
help(rbinom) #perintah yang digunakan untuk mengetahui tentang fungsi rbinom

hist(rbinom(n, 1, prob = 0.5))

n <- 100 #menentukan jumlah sampel sebanyak 100
p <- .75 #menentukan nilai probabilitas sebesar 0.75

u <- runif(n) #menghasilkan sampel acak antara 0 dan 1 sebanyak n kali
xsim_itm <- log(1 - u, 1 - p)
```

```{r}
cdf <- function(i) {
  return (1-(1-p)^(i+1))
} #fungsi untuk menghitung nilai distribusi kumulatif
cumulativ <- sapply(0:1000, cdf) #fungsi sapply digunakan untuk menghasilkan nilai distribusi kumulatif untuk setiap nilai i dari 0 hingga 1000
sample_room <- c(0:1000) #variabel yang berisi semua nilai yang mungkin dari variabel acak antara 0 hingga 1000
u <- runif(n) # menghasilkan sampel acak antara 0 dan 1

min_get <- function(uval) {
  min(min(sample_room[cumulativ >= uval]), 1000)
}
xsim <- sapply(u, min_get)
```

```{r}
hist(rgeom(n,p))

set.seed(100) #menentukan angka acak yang akan dihasilkan sebanyak 100
n <- 1000 #jumlah sampel yang digunakan sebanyak 1000
p <- 0.4 #menetapkan nilai probabilitas yakni 0.4
u <- runif(n) #menghasilkan n sampel acak antara 0 dan 1


binomint <- as.integer(u > 1 - p) #variabel yang berisi hasil simulasi yang membandingan setiap nilai acak 'u' dengan nilai 1-p
mean(binomint)
var(binomint)

